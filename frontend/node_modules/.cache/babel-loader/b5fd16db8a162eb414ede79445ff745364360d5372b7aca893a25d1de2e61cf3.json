{"ast":null,"code":"var _jsxFileName = \"/Users/eunice/version2/frontend/src/pages/QuestionPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"../components/DialogForm.css\";\nimport AddQuestionButton from \"../components/AddQuestionButton\";\nimport AddQuestionForm from \"../components/AddQuestionForm\";\nimport Dialog from \"../components/Dialog\";\nimport EditQuestionForm from \"../components/EditQuestionForm\";\nimport QuestionTable from \"../components/QuestionTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionPage = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [dialogForm, setDialogForm] = useState(null);\n  const dialogRef = useRef(null);\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/questions');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setQuestions(data); // Update the state with fetched questions\n      } catch (error) {\n        console.error('Error fetching questions:', error);\n      }\n    };\n    fetchQuestions(); // Call the fetch function on component mount\n  }, []); // Empty dependency array to run only once\n\n  function toggleDialog() {\n    if (!dialogRef.current) {\n      return;\n    }\n    dialogRef.current.hasAttribute(\"open\") ? dialogRef.current.close() : dialogRef.current.showModal();\n  }\n  const handleAddQuestion = async newQuestion => {\n    toggleDialog();\n    try {\n      const response = await fetch('http://localhost:8080/questions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newQuestion)\n      });\n      if (response.ok) {\n        const savedQuestion = await response.json();\n\n        // check the new question\n        console.log('savedQuestion:', savedQuestion);\n        setQuestions(prevQuestions => [...prevQuestions, savedQuestion]);\n      } else {\n        console.error('Failed to add question');\n      }\n    } catch (error) {\n      console.error('Error adding question:', error);\n    }\n  };\n  const handleEditQuestion = async question => {\n    setDialogForm(/*#__PURE__*/_jsxDEV(EditQuestionForm, {\n      question: question,\n      onUpdate: handleUpdateQuestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 19\n    }, this));\n    toggleDialog();\n  };\n  const handleUpdateQuestion = async updatedQuestion => {\n    try {\n      console.log('Updating question with ID:', updatedQuestion._id); // Log the ID being used\n      const response = await fetch(`http://localhost:8080/questions/${updatedQuestion._id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedQuestion) // Send the updated question dat\n      });\n      console.log('updatedQuestion:', updatedQuestion);\n      if (response.ok) {\n        const savedQuestion = await response.json(); // Parse the updated question\n        console.log('Saved question:', savedQuestion); // Log the saved question\n\n        setQuestions(prevQuestions => prevQuestions.map(q => q._id === savedQuestion._id ? savedQuestion : q) // Update the specific question\n        );\n      } else {\n        const errorMessage = await response.text(); // Get error message from response\n        console.error(`Failed to edit question: ${response.status} ${errorMessage}`);\n      }\n    } catch (error) {\n      console.error('Error editing question:', error);\n    }\n    toggleDialog();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      paddingTop: \"70px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddQuestionButton, {\n      onClick: () => {\n        setDialogForm(/*#__PURE__*/_jsxDEV(AddQuestionForm, {\n          onAdd: handleAddQuestion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 23\n        }, this));\n        toggleDialog();\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(QuestionTable, {\n      questions: questions,\n      onEdit: handleEditQuestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      toggleDialog: toggleDialog,\n      ref: dialogRef,\n      children: dialogForm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionPage, \"jdkeNO7DK2j/TDbzACK7pB6G1kE=\");\n_c = QuestionPage;\nexport default QuestionPage;\nvar _c;\n$RefreshReg$(_c, \"QuestionPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","AddQuestionButton","AddQuestionForm","Dialog","EditQuestionForm","QuestionTable","jsxDEV","_jsxDEV","QuestionPage","_s","questions","setQuestions","dialogForm","setDialogForm","dialogRef","fetchQuestions","response","fetch","ok","Error","data","json","error","console","toggleDialog","current","hasAttribute","close","showModal","handleAddQuestion","newQuestion","method","headers","body","JSON","stringify","savedQuestion","log","prevQuestions","handleEditQuestion","question","onUpdate","handleUpdateQuestion","fileName","_jsxFileName","lineNumber","columnNumber","updatedQuestion","_id","map","q","errorMessage","text","status","style","paddingTop","children","onClick","onAdd","onEdit","ref","_c","$RefreshReg$"],"sources":["/Users/eunice/version2/frontend/src/pages/QuestionPage.js"],"sourcesContent":["\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"../components/DialogForm.css\";\nimport AddQuestionButton from \"../components/AddQuestionButton\";\nimport AddQuestionForm from \"../components/AddQuestionForm\";\nimport Dialog from \"../components/Dialog\";\nimport EditQuestionForm from \"../components/EditQuestionForm\";\nimport QuestionTable from \"../components/QuestionTable\";\n\nconst QuestionPage = () => {\n  const [questions, setQuestions] = useState([]);\n  const [dialogForm, setDialogForm] = useState(null);\n  const dialogRef  = useRef(null);\n\n  useEffect(() => {\n      const fetchQuestions = async () => {\n        try {\n          const response = await fetch('http://localhost:8080/questions');\n          if (!response.ok) {\n            throw new Error('Network response was not ok');\n          }\n          const data = await response.json();\n          setQuestions(data); // Update the state with fetched questions\n        } catch (error) {\n          console.error('Error fetching questions:', error);\n        }\n      };\n\n      fetchQuestions(); // Call the fetch function on component mount\n    }, []); // Empty dependency array to run only once\n\n  function toggleDialog() {\n    if (!dialogRef.current) {\n      return;\n    }\n\n    dialogRef.current.hasAttribute(\"open\")\n      ? dialogRef.current.close()\n      : dialogRef.current.showModal();\n  }\n  const handleAddQuestion = async (newQuestion) => {\n    toggleDialog();\n\n    try {\n        const response = await fetch('http://localhost:8080/questions', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(newQuestion),\n        });\n\n        if (response.ok) {\n          const savedQuestion = await response.json();\n\n          // check the new question\n          console.log('savedQuestion:', savedQuestion);\n\n          setQuestions((prevQuestions) => [...prevQuestions, savedQuestion]);\n        } else {\n          console.error('Failed to add question');\n        }\n      } catch (error) {\n        console.error('Error adding question:', error);\n      }\n    };\n\n  const handleEditQuestion = async (question) => {\n    setDialogForm(<EditQuestionForm question={question} onUpdate={handleUpdateQuestion} />);\n    toggleDialog();\n  }\n\n  const handleUpdateQuestion = async (updatedQuestion) => {\n    try {\n      console.log('Updating question with ID:', updatedQuestion._id); // Log the ID being used\n      const response = await fetch(`http://localhost:8080/questions/${updatedQuestion._id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedQuestion), // Send the updated question dat\n      });\n\n      console.log('updatedQuestion:', updatedQuestion);\n\n      if (response.ok) {\n        const savedQuestion = await response.json(); // Parse the updated question\n        console.log('Saved question:', savedQuestion); // Log the saved question\n\n        setQuestions((prevQuestions) =>\n          prevQuestions.map((q) => (q._id === savedQuestion._id ? savedQuestion : q)) // Update the specific question\n              );\n      } else {\n        const errorMessage = await response.text(); // Get error message from response\n        console.error(`Failed to edit question: ${response.status} ${errorMessage}`);\n      }\n    } catch (error) {\n      console.error('Error editing question:', error);\n    }\n    toggleDialog();\n  };\n\n  return (\n    <div style={{ paddingTop: \"70px\" }}>\n      <h1></h1>\n      <AddQuestionButton onClick={() => {\n        setDialogForm(<AddQuestionForm onAdd={handleAddQuestion} />);\n        toggleDialog();\n    \n      }} />\n      <QuestionTable questions={questions} onEdit={handleEditQuestion} />\n      <Dialog toggleDialog={toggleDialog} ref={dialogRef}>\n          {dialogForm}\n      </Dialog>\n    </div>\n  );\n};\n\nexport default QuestionPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}